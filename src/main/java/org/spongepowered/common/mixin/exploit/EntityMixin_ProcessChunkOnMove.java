/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.mixin.exploit;

import net.minecraft.entity.Entity;
import net.minecraft.world.World;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.common.bridge.entity.EntityBridge;

@Mixin(Entity.class)
public abstract class EntityMixin_ProcessChunkOnMove implements EntityBridge {

    @Shadow public World world;

    /**
     * @author Aikar - July 29th, 2018
     * @reason Always process chunk registration after moving.
     * This will help guarantee that entities are always in the
     * chunk that they are currently located at.
     *
     * @see <html>https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0315-Always-process-chunk-registration-after-moving.patch</html>
     *
     * @param x The x position
     * @param y The y position
     * @param z The z position
     * @param ci The callback info
     */
    @Inject(method = "setPosition", at = @At(value = "FIELD", target = "Lnet/minecraft/entity/Entity;width:F"))
    private void processChunkOnMove$onSetPositionEnsureWorldChunkNoticed(final double x, final double y, final double z, final CallbackInfo ci) {
        if (this.bridge$isWorldTracked() && !this.world.isRemote) {
            // We want to not force an update, this just forces the world to update the tracked entity lists
            // and the chunks containing entities.
            this.world.updateEntityWithOptionalForce((net.minecraft.entity.Entity) (Object) this, false);
        }
    }

    /**
     * @author Aikar - July 29th, 2018
     * @reason Always process chunk registration after moving.
     * This will help guarantee that entities are always in the
     * chunk that they are currently located at.
     *
     * @see <html>https://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0315-Always-process-chunk-registration-after-moving.patch</html>
     *
     * @param ci The callback info
     */
    @Inject(method = "resetPositionToBB", at = @At("TAIL"))
    private void processChunkOnMove$onResizeVerifyEntityInWorld(final CallbackInfo ci) {
        // Check if the entity is actively being tracked.
        if (this.bridge$isWorldTracked() && !this.world.isRemote) {
            // We want to not force an update, this just forces the world to update the tracked entity lists
            // and the chunks containing entities.
            this.world.updateEntityWithOptionalForce((net.minecraft.entity.Entity) (Object) this, false);
        }
    }

}
